name: CI
on:
  push:
    branches:
      - master
  pull_request:

# This allows a subsequently queued workflow run to interrupt previous runs, but
# only in pull requests.
concurrency:
  group: '${{ github.workflow }} @ ${{ github.head_ref || github.sha }}'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.artifact.os }}
    env:
      CARGO_TERM_COLOR: always
      # https://github.com/rust-lang/rust/issues/78210
      RUSTFLAGS: -C strip=symbols -C target-feature=+crt-static
      # https://github.com/rust-lang/cargo/pull/15462
      RUSTDOCFLAGS: -C target-feature=+crt-static
      TARGETS: ${{ join(matrix.artifact.targets, ' ') || matrix.artifact.name }}
    strategy:
      fail-fast: false
      matrix:
        artifact:
          - os: ubuntu-latest
            name: x86_64-unknown-linux-musl
          - os: windows-latest
            name: x86_64-pc-windows-msvc
          - os: macos-latest
            name: universal-apple-darwin
            targets:
              - aarch64-apple-darwin
              - x86_64-apple-darwin
            combine: lipo
    steps:
      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # For git describe
          fetch-depth: 0

      - name: Install musl-gcc
        if: matrix.artifact.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@2c09a5e66da6c8016428a2172bd76e5e4f14bb17 # v1.5.3
        with:
          packages: musl-tools

      - name: Get version
        id: get_version
        shell: bash
        run: |
          echo -n 'version=' >> "${GITHUB_OUTPUT}"
          git describe --always \
              | sed -E "s/^v//g;s/([^-]*-g)/r\1/;s/-/./g" \
              >> "${GITHUB_OUTPUT}"

      - name: Install toolchains
        shell: bash
        run: |
          for target in ${TARGETS}; do
              rustup target add "${target}"
          done

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Clippy
        shell: bash
        run: |
          for target in ${TARGETS}; do
              cargo clippy --release \
                  --target "${target}"
          done

      - name: Build
        shell: bash
        run: |
          for target in ${TARGETS}; do
              cargo build --release \
                  --target "${target}"
          done

      - name: Tests
        shell: bash
        run: |
          for target in ${TARGETS}; do
              cargo test --release \
                  --target "${target}"
          done

      - name: Create output directory
        shell: bash
        run: |
          rm -rf target/output

          case "${{ matrix.artifact.combine }}" in
          lipo)
              mkdir target/output
              cmd=(lipo -output target/output/nudl -create)
              for target in ${TARGETS}; do
                  cmd+=("target/${target}/release/nudl")
              done
              "${cmd[@]}"
              ;;
          '')
              ln -s "${TARGETS}/release" target/output
              ;;
          *)
              echo >&2 "Unsupported combine argument"
              exit 1
              ;;
          esac

      # This is done to ensure a flat directory structure. The upload-artifact
      # action no longer allows multiple uploads to the same destination.
      - name: Copy documentation to target directory
        shell: bash
        run: cp LICENSE README.md target/output/

      - name: Archive executable
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: nudl-${{ steps.get_version.outputs.version }}-${{ matrix.artifact.name }}
          path: |
            target/output/LICENSE
            target/output/README.md
            target/output/nudl
            target/output/nudl.exe
